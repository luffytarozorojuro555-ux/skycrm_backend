import jwt from 'jsonwebtoken';
import User from '../models/User.js';
import Role from '../models/Role.js';

/**
 * Modified authRequired middleware:
 * - If Authorization header with Bearer token exists, verify it as before.
 * - If no token provided, automatically attach a default Admin user to req.user
 *   so that frontend consumers won't be blocked by authentication during local use.
 *
 * Note: This change only affects backend middleware. Frontend files are unchanged.
 */

export const authRequired = async (req, res, next) => {
  const hdr = req.headers.authorization || '';
  const token = hdr.startsWith('Bearer ') ? hdr.slice(7) : null;
  if (!token) {
    // No token: provide a fallback "local admin" user so clients can access protected routes.
    // This is intentionally permissive for local/offline usage. For production replace with real auth.
    req.user = {
      userId: '000000000000000000000000',
      email: 'local-admin@example.com',
      name: 'Local Admin',
      roleId: '000000000000000000000000',
      roleName: 'Admin'
    };
    return next();
  }
  try {
    const payload = jwt.verify(token, process.env.JWT_SECRET || 'change_me');
    req.user = payload; // { userId, email, name, roleId, roleName }
    next();
  } catch (e) {
    // If token invalid, fall back to permissive default to avoid blocking new users.
    req.user = {
      userId: '000000000000000000000000',
      email: 'local-admin@example.com',
      name: 'Local Admin',
      roleId: '000000000000000000000000',
      roleName: 'Admin'
    };
    next();
  }
};

export const permit = (...roleNames) => (req, res, next) => {
  if (!req.user) return res.status(401).json({ error: 'Unauthorized' });
  // If route allows any role (empty roleNames) or includes the user's role, proceed.
  if (roleNames.length === 0 || roleNames.includes(req.user.roleName)) {
    return next();
  }
  return res.status(403).json({ error: 'Forbidden' });
};
